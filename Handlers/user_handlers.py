from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
import re

from Data_base.db_user import add_user, get_all_tasks, complete_task
from Keyboards.user_keyboard import user_keyboard_start, user_keyboard_close_task, get_confirmation_keyboard

user_router = Router()

#–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç
@user_router.message(Command('start'))
async def start(message: types.Message):
    await add_user(message.from_user.id, message.from_user.full_name, message.from_user.username)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞', reply_markup=user_keyboard_start)


def escape_markdown_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2.
    """
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
    # –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω: —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª—ç—à –ø–µ—Ä–≤—ã–º!
    special_chars = r"[_*\[\]()~`>#+-=|{}.!]"
    return re.sub(special_chars, r"\\\g<0>", text)

#–ó–∞–ø—Ä–æ—Å –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@user_router.callback_query(F.data == 'tasks_list')
async def tasks_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    tasks = await get_all_tasks(user_id)

    await callback_query.answer(text="–ó–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω—ã!")

    if tasks:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        # –°–∞–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–í–∞—à–∏ –∑–∞–¥–∞—á–∏) –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å Markdown, –ø–æ—ç—Ç–æ–º—É –µ–≥–æ —á–∞—Å—Ç—å —Ç–æ–∂–µ –º–æ–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
        # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ç–∞–º –Ω–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤.
        response_message = f"**–í–∞—à–∏ –∑–∞–¥–∞—á–∏:**\n\n"

        for task in tasks:
            task_id, short_description, description, deadline = task

            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ë–î –∏ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.
            # task_id –æ–±—ã—á–Ω–æ —á–∏—Å–ª–æ, –Ω–æ –µ—Å–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –≤ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–º —à—Ä–∏—Ñ—Ç–µ (`task_id`),
            # —Ç–æ —Ç–∞–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ.
            escaped_short_description = escape_markdown_v2(short_description)
            # –ï—Å–ª–∏ description —Ç–æ–∂–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è, –µ–≥–æ —Ç–æ–∂–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
            # escaped_description = escape_markdown_v2(description)
            escaped_deadline = escape_markdown_v2(
                str(deadline))  # –î–µ–¥–ª–∞–π–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º Date, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É

            response_message += (
                f"‚Ä¢ **ID:** `{task_id}`\n"  # ID –≤ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–º —à—Ä–∏—Ñ—Ç–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                f"  **–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å:** {escaped_short_description}\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                f"  **–î–µ–¥–ª–∞–π–Ω:** {escaped_deadline}\n\n" # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω
            )

        await callback_query.message.answer(response_message,
                                            parse_mode=ParseMode.MARKDOWN_V2,
                                            reply_markup=user_keyboard_close_task
                                            )
    else:
        await callback_query.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")

#–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ (–í—ã–ø–æ–ª–Ω–∏—Ç—å/—Å–æ–æ–±—â–∏—Ç—å –æ –±–ª–æ–∫–µ—Ä–∞—Ö)
@user_router.callback_query(F.data == 'task_done')
async def task_success_finish(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        tasks = await get_all_tasks(user_id)

        if not tasks:
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è!", show_alert=True)
            return

        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
        for task in tasks:
            if len(task) >= 2:
                task_id, short_description = task[0], task[1]
                keyboard.inline_keyboard.append([
                    types.InlineKeyboardButton(
                        text=f"–ó–∞–≤–µ—Ä—à–∏—Ç—å: {short_description[:30]}" + ("..." if len(short_description) > 30 else ""),
                        callback_data=f"complete_{task_id}"
                    )
                ])

        await callback_query.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
        await callback_query.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ task_success_finish: {str(e)}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á", show_alert=True)


@user_router.callback_query(F.data.startswith('complete_'))
async def select_task_handler(callback_query: types.CallbackQuery):
    try:
        task_id = int(callback_query.data.split('_')[1])
        await callback_query.message.answer(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É #{task_id}?",
            reply_markup=get_confirmation_keyboard(task_id)
        )
        await callback_query.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–¥–∞—á–∏: {str(e)}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–¥–∞—á–∏", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@user_router.callback_query(F.data.startswith('confirm_'))
async def confirm_task_completion(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        task_id = int(callback_query.data.split('_')[1])

        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ë–î
        await complete_task(user_id, task_id)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = await get_all_tasks(user_id)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[])
        for task in tasks:
            if len(task) >= 2:
                current_id, short_description = task[0], task[1]
                keyboard.inline_keyboard.append([
                    types.InlineKeyboardButton(
                        text=f"–ó–∞–≤–µ—Ä—à–∏—Ç—å: {short_description[:30]}" + ("..." if len(short_description) > 30 else ""),
                        callback_data=f"complete_{current_id}"
                    )
                ])

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        await callback_query.message.delete()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–∞–º–∏
        if keyboard.inline_keyboard:
            await callback_query.message.answer(
                "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –æ–±–Ω–æ–≤–ª–µ–Ω:",
                reply_markup=keyboard
            )
        else:
            await callback_query.message.answer("üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

        await callback_query.answer(f"–ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {str(e)}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@user_router.callback_query(F.data == 'cancel')
async def cancel_task_completion(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await callback_query.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")